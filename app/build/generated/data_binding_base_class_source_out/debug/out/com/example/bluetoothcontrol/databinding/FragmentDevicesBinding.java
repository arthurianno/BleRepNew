// Generated by view binder compiler. Do not edit!
package com.example.bluetoothcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bluetoothcontrol.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDevicesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton ClearRecycler;

  @NonNull
  public final RecyclerView devicesRecycler;

  @NonNull
  public final FloatingActionButton wrapStartScan;

  private FragmentDevicesBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton ClearRecycler, @NonNull RecyclerView devicesRecycler,
      @NonNull FloatingActionButton wrapStartScan) {
    this.rootView = rootView;
    this.ClearRecycler = ClearRecycler;
    this.devicesRecycler = devicesRecycler;
    this.wrapStartScan = wrapStartScan;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDevicesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDevicesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_devices, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDevicesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ClearRecycler;
      FloatingActionButton ClearRecycler = ViewBindings.findChildViewById(rootView, id);
      if (ClearRecycler == null) {
        break missingId;
      }

      id = R.id.devicesRecycler;
      RecyclerView devicesRecycler = ViewBindings.findChildViewById(rootView, id);
      if (devicesRecycler == null) {
        break missingId;
      }

      id = R.id.wrapStartScan;
      FloatingActionButton wrapStartScan = ViewBindings.findChildViewById(rootView, id);
      if (wrapStartScan == null) {
        break missingId;
      }

      return new FragmentDevicesBinding((ConstraintLayout) rootView, ClearRecycler, devicesRecycler,
          wrapStartScan);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
